{"version":3,"sources":["Components/mainPage.js","Components/login.js","Components/signup.js","Components/admin.js","Components/router.js","App.js","serviceWorker.js","index.js"],"names":["Main","state","theQuestion","handleChange","e","arr","push","Object","defineProperty","target","name","value","_this","setState","sendQuestion","axios","post","then","res","console","log","_this2","this","react_default","a","createElement","className","type","onChange","onClick","Component","Login","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","login","_this$state","username","password","_ref","config","JSON","parse","data","window","location","href","catch","err","Signup","signup","Admin","sendAnswer","questions_id","answer","componentDidMount","get","allAnswers","map","user","questions","ques","structure","_id","Router","BrowserRouter","Switch","Route","exact","path","component","React","App","router","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.561b5a2d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Main extends Component {\n  state = {\n    theQuestion:[]\n  }\n\n  // componentDidMount() {\n  //   axios.post('/question',{})\n  //     .then(res => {\n  //       const persons = res.data;\n  //       this.setState({ persons });\n  //     })\n  // }\n\n  handleChange = e => {\n    const arr = [];\n    arr.push({\n      [e.target.name]: e.target.value\n    })\n    this.setState({ theQuestion: arr });\n  }\n\n  sendQuestion = () => {\n    const { theQuestion } = this.state;\n\n    axios.post('/question', { theQuestion })\n    .then(res => {\n      console.log(res);\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"Main\">\n      Main\n      <input \n        type=\"text\" \n        name='structure'\n        onChange={e => this.handleChange(e)}\n       />\n       <button onClick={() => this.sendQuestion()}>Question</button>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Login extends Component {\nconstructor(props){\n  super(props);\n  this.state = {\n    username: '',\n    password:'',\n  }\n}\nonChange = e => {\n  this.setState({\n    [e.target.name]: e.target.value\n  })\n}\n\nlogin = () =>{ \n  const { username, password } =this.state;\n  axios.post('/login', {username, password})\n  .then(({config}) => {\n    if (JSON.parse(config.data).username === 'admin'){\n      window.location.href = '/admin'\n    }else {\n      window.location.href = '/main';\n    }\n  })\n  .catch(err => {\n    console.log(err)\n  })\n} \n\n  render() {\n    return (\n      <div className=\"Login\">\n      <button onClick={() => window.location.href='/signup'}>signup</button>\n\n        User Name :\n        <input\n        name='username'\n        onChange={e => this.onChange(e)}\n        />\n        Password :\n        <input\n        name='password'\n        onChange={e => this.onChange(e)}\n        />\n        <button onClick={() => this.login()}>login</button>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Signup extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      username: '',\n      password:'',\n    }\n  }\n  onChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n  \n  signup = () =>{ \n    const { username, password } =this.state;\n    axios.post('/signup', {username, password})\n    .then(({config}) => {\n      if (JSON.parse(config.data).username === 'admin'){\n        window.location.href = '/admin'\n      }else {\n        window.location.href = '/main';\n      }\n    })\n    .catch(err => {\n      console.log(err)\n    })\n  } \n\n \n  render() {\n    return (\n      <div className=\"signup\">\n      <button onClick={() => window.location.href='/login'}>login</button>\n\n      User Name :\n      <input\n      name='username'\n      onChange={e => this.onChange(e)}\n      />\n      Password :\n      <input\n      name='password'\n      onChange={e => this.onChange(e)}\n      />\n      <button onClick={() => this.signup()}>signup</button>\n    </div>\n    );\n  }\n}\n\nexport default Signup;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Admin extends Component {\n  constructor(props){\n      super(props);\n      this.state = {\n        answer: '',\n        allAnswers: []\n      }\n  }\n  \n  sendAnswer = (questions_id) => {\n    const { answer } = this.state;\n    axios.post('/addAnswer', {answer, questions_id})\n    .then(data => {\n      console.log(data);\n    })\n    .catch(err => {\n      console.log(err);\n    })\n  };\n  \n  onChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    })\n  };\n  \n  componentDidMount = () => {\n    axios.get('/allQuestion')\n    .then(({data}) => {\n      this.setState({\n        allAnswers: data,\n      })\n      console.log(data);\n    })\n    .catch(err => {\n      console.log(err);\n    })\n  };\n  \n  render() {\n    const { allAnswers } = this.state;\n    return (\n      <div className=\"Admin\">\n      Admin\n      <div>\n\n      {allAnswers.map(user => {\n        return(\n          <div>\n          {user.username}\n          <div>\n          {user.questions.map(ques => {\n            \n           return( ques.structure ?\n             (<div>\n              {ques.structure}\n              <input\n              name='answer'\n              onChange={e => {this.onChange(e)}}\n              />\n              <button onClick={() => this.sendAnswer(ques._id)}>yes</button>\n            </div>) : null)\n          })\n          }\n          </div>\n        </div>)\n      })}\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default Admin;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Main from './mainPage.js';\nimport Login from './login.js';\nimport Signup from './signup.js';\nimport Admin from './admin';\n\nclass Router extends React.Component {\n    render () {\n        return (\n            <BrowserRouter>\n                <Switch>\n                    <Route exact path='/' component={Signup} />\n                    <Route exact path='/login' component={Login} />\n                    <Route exact path='/signup' component={Signup} />\n                    <Route exact path='/main' component={Main} />\n                    <Route exact path='/admin' component={Admin} />\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default Router;","import React, { Component } from 'react';\nimport Router from './Components/router.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Router />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}